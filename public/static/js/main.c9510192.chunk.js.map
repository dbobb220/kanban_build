{"version":3,"sources":["images/kanban_home.png","components/EditTask.js","redux/actions/loadboard.js","redux/actionTypes.js","redux/actions/aside.js","containers/EditTask.js","components/Task.js","containers/Task.js","redux/actions/editTask.js","components/Board.js","containers/Board.js","components/NewTask.js","containers/NewTask.js","App.js","containers/App.js","redux/reducers/index.js","redux/reducers/loadboard.js","redux/reducers/aside.js","redux/reducers/editTask.js","redux/reducers/auth.js","redux/store.js","redux/state.js","serviceWorker.js","components/Auth/Login.js","redux/actions/auth.js","components/Auth/Signup.js","containers/Login.js","containers/Signup.js","index.js"],"names":["module","exports","EditTask","props","handleChange","e","target","value","name","setState","type","color","colorType","state","title","id","description","category","status","assignee","priority","bind","onSubmit","Bug","Feature","TechDebt","Improvement","Research","payload","this","fetchLoading","fetchPut","closeAside","updateStatus","className","Card","style","width","height","bg","text","Header","Title","Badge","pill","variant","Body","Text","Footer","Form","Group","controlId","Label","Control","required","onChange","as","rows","disabled","Button","onClick","onDelete","editTask","_id","Component","bool","isLoading","fetchCall","url","obj","dispatch","fetch","then","res","json","tasks","fetchSuccess","catch","err","hasErrored","message","fetchError","changeAside","component","asideContainer","connect","asideActive","method","headers","body","JSON","stringify","console","log","setStatus","Task","editTaskClick","task","find","t","editClick","openAside","footIcons","key","taskId","margin","bgcolor","textColor","container","Board","backlog","active","done","map","card","i","push","schema","Yup","taskTitle","min","max","taskCategory","taskDescription","taskType","oneOf","NewTask","textAlign","validationSchema","values","actions","a","bodySubmit","data","resetForm","alert","initialValues","taskColor","handleSubmit","isSubmitting","touched","errors","isValid","noValidate","placeholder","App","boardContainer","combineReducers","action","user","Cookie","set","token","userErrored","userIsLoading","createStore","reducer","applyMiddleware","thunk","Boolean","window","location","hostname","match","Login","username","password","reload","userError","userLoading","userSuccess","Signup","userLogin","credentials","userSignup","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9510192.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kanban_home.fa3da3de.png\";","import React, {Component} from 'react';\nimport {Card, Badge, Form, Button} from 'react-bootstrap';\n\nclass EditTask extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            id: '',\n            description: '',\n            category: '',\n            type: '',\n            status: '',\n            color: '',\n            assignee: null,\n            priority: 3\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.colorType = {\n            Bug: \"danger\",\n            Feature: \"success\",\n            TechDebt: \"warning\",\n            Improvement: \"primary\",\n            Research: \"info\"\n        }\n    }\n\n    handleChange = (e) => {\n        let target = e.target;\n        let value = target.value;\n        let name = target.name;\n        name === \"type\" \n            ? this.setState({type: value, color: this.colorType[value]})\n            : this.setState({[name]: value});\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.editTask._id !== state.id) {\n          return {\n            title: props.editTask.title,\n            id: props.editTask._id,\n            description: props.editTask.description,\n            category: props.editTask.category,\n            type: props.editTask.type,\n            status: props.editTask.status,\n            color: props.editTask.color\n          };\n        }\n        // Return null to indicate no change to state.\n        return null;\n      }\n\n    onSubmit(id) {\n        let payload = this.state;\n        this.props.fetchLoading(true);\n        this.props.fetchPut(`/tasks/${id}`, payload);\n        this.props.fetchLoading(false);\n        this.props.closeAside(false);\n    }\n\n    onDelete(id, value) {\n        this.props.fetchLoading(true);\n        this.props.updateStatus(id, value);\n        this.props.fetchLoading(false);\n        this.props.closeAside(false);\n    }\n\n    render() {\n        return(\n            <div className=\"edit-task\">\n                <Card style={{width:'180px', height:'110px'}} bg=\"light\" text=\"dark\">\n                    <Card.Header>\n                        <Card.Title>{this.state.title}</Card.Title>\n                        <Badge pill variant={this.state.color}>{this.state.category}</Badge>\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Text>{this.state.description}</Card.Text>\n                    </Card.Body>\n                    <Card.Footer className=\"text-muted\"></Card.Footer>\n                </Card>\n                <Form>\n                <Form.Group controlId=\"taskTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control \n                            required\n                            type=\"text\" \n                            name=\"title\"\n                            value={this.state.title} \n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"taskCategory\">\n                        <Form.Label>Category</Form.Label>\n                        <Form.Control \n                            required\n                            type=\"text\" \n                            name=\"category\"\n                            value={this.state.category}\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"taskDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control \n                            required\n                            as=\"textarea\" \n                            rows=\"3\" \n                            name=\"description\"\n                            value={this.state.description}\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control \n                            required\n                            as=\"select\"\n                            name=\"type\"\n                            value={this.state.type}\n                            onChange={this.handleChange}\n                        >\n                            <option value=\"- Select One -\" disabled>- Select One -</option>\n                            <option id=\"danger\" value=\"Bug\">Bug</option>\n                            <option id=\"success\" value=\"Feature\">Feature</option>\n                            <option id=\"warning\" value=\"TechDebt\">Tech Debt</option>\n                            <option id=\"primary\" value=\"Improvement\">Improvement</option>\n                            <option id=\"info\" value=\"Research\">Research</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n                <div className=\"buttons\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={()=>{this.onSubmit(this.state.id)}}>Submit</Button>\n                    <Button variant=\"danger\" type=\"submit\" onClick={()=>{this.onDelete(this.state.id, 'isDeleted')}}>Delete</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default EditTask;","import {FETCH_ERROR, FETCH_LOADING, FETCH_SUCCESS} from '../actionTypes'\n\nexport const fetchError = (bool, err) => {\n    return {\n        type:FETCH_ERROR,\n        hasErrored: bool,\n        message: err\n    }\n}\n\nexport const fetchLoading = (bool) => {\n    return {\n        type: FETCH_LOADING,\n        isLoading: bool\n    }\n}\n\nexport const fetchSuccess = (tasks) => {\n    return {\n        type: FETCH_SUCCESS,\n        tasks\n    }\n}\n\nexport const fetchCall = (url, obj) => {\n    return (dispatch) => {\n        fetch(url, obj)\n        .then(res=>res.json())\n        .then(tasks=>{\n                dispatch(fetchSuccess(tasks));\n            })\n            .catch(err=>dispatch(fetchError(true, err)))\n    }\n}\n\nexport const fetchPut = (url, payload) => {\n    return (dispatch) => {\n        fetch(url, {\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(res=> res.text())\n            .then(text=> {\n                console.log(text);\n                dispatch(fetchCall('/tasks'))\n            })\n                .catch(err=>console.log(`Error:${err}`))\n    }\n}\n\nexport const updateStatus = (id, value) => {\n    return (dispatch) => {\n        let setStatus = {status: value};\n        fetch(`/tasks/${id}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(setStatus)\n        })\n        .then(res=>res.text())\n        .then(text=>dispatch(fetchCall('/tasks')))\n            .catch(err=>console.log(`Error:${err}`))\n    }\n}","export const FETCH_ERROR = 'FETCH_ERROR';\nexport const FETCH_LOADING = 'FETCH_LOADING';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const CLOSE_ASIDE = 'CLOSE_ASIDE';\nexport const OPEN_ASIDE = 'OPEN_ASIDE';\nexport const ASIDE_CONTENT = 'ASIDE_CONTENT';\nexport const EDIT_CLICK = 'EDIT_CLICK';\nexport const USER_ERROR = 'USER_ERROR'; \nexport const USER_LOADING = 'USER_LOADING'; \nexport const USER_SUCCESS = 'USER_SUCCESS';","import {CLOSE_ASIDE, OPEN_ASIDE, ASIDE_CONTENT} from '../actionTypes';\n\nexport const closeAside = (bool) => {\n    return {\n        type: CLOSE_ASIDE,\n        asideActive: false\n    }\n}\n\nexport const openAside = (bool) => {\n    return {\n        type: OPEN_ASIDE,\n        asideActive: true,\n    }\n}\n\nexport const changeAside = (component) => {\n    return {\n        type: ASIDE_CONTENT,\n        asideContainer: component\n    }\n}\n","import EditTask from '../components/EditTask';\nimport { connect } from 'react-redux';\nimport {fetchCall, fetchLoading, fetchPut, updateStatus} from '../redux/actions/loadboard';\nimport {closeAside} from '../redux/actions/aside';\n\nconst mapStateToProps = (state) => {\n    return {\n        editTask: state.editTask,\n        tasks: state.tasks,\n        hasErrored: state.hasErrored,\n        isLoading: state.isLoading,\n        asideContainer: state.asideContainer,\n        asideActive: state.asideActive\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchCall: (url) => dispatch(fetchCall(url)),\n        fetchLoading: (bool) => dispatch(fetchLoading(bool)),\n        closeAside: ()=> dispatch(closeAside(false)),\n        fetchPut: (url, payload) => dispatch(fetchPut(url, payload)),\n        updateStatus: (id, value) => dispatch(updateStatus(id, value))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTask);","import React from 'react';\nimport {Card, Badge} from 'react-bootstrap';\nimport 'material-icons';\nimport './Task.css';\nimport EditTask from '../containers/EditTask';\n\nfunction Task(props) {\n    let updateStatus = (id, value) => {\n        props.fetchLoading(true);\n        let setStatus = {status: value};\n        fetch(`/tasks/${id}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(setStatus)\n        })\n        props.fetchCall('/tasks');\n        props.fetchLoading(false);\n    }\n\n    let editTaskClick = (id) => {\n        let task = props.tasks.find(t => t._id === id);\n        props.editClick(task);\n        props.changeAside(['']);\n        props.changeAside(<EditTask />);\n        props.openAside(true);\n    } \n    let footIcons = [];\n    switch(true) {\n        case props.status === \"isBacklog\":\n            footIcons = [\n                <span className=\"material-icons\" title=\"Edit\" key=\"Edit\" onClick={()=>{editTaskClick(props.taskId)}}\n                    >edit</span>,\n                <span className=\"material-icons\" title=\"Activate\" key=\"Activate\" \n                        onClick={()=>{updateStatus(props.taskId, \"isActive\")}}>add</span>\n            ]\n        break;\n        case props.status === \"isActive\":\n            footIcons = [\n                <span className=\"material-icons\" title=\"Edit\" key=\"Edit\" onClick={()=>{editTaskClick(props.taskId)}}>edit</span>,\n                <div key=\"Action\">\n                    <span className=\"material-icons\" title=\"Backlog\" key=\"Backlog\" onClick={()=>{updateStatus(props.taskId, \"isBacklog\"); console.log(props.taskId, \"isDone\")}}>thumb_down</span>\n                    <span className=\"material-icons\" title=\"Done\" key=\"Done\" onClick={()=>{updateStatus(props.taskId, \"isDone\"); console.log(props.taskId, \"isDone\");}}>thumb_up</span>\n                </div>\n            ]\n        break;\n        case props.status === \"isDone\":\n            footIcons = [\n                <span className=\"material-icons\" title=\"Edit\" key=\"Edit\" onClick={()=>{editTaskClick(props.taskId)}}>edit</span>,\n                <div key=\"Action\">\n                    <span className=\"material-icons\" title=\"Reject\" onClick={()=>{updateStatus(props.taskId, \"isActive\");}}>close</span>\n                    <span className=\"material-icons\" title=\"Accept\" onClick={()=>{updateStatus(props.taskId, \"isArchive\"); }}>check</span>\n                </div>\n            ]\n        break;\n        default:\n    }\n    return (\n        <Card style={{width:'180px', height:'110px', margin:'2px'}} bg={props.bgcolor} text={props.textColor}>\n            <Card.Header>\n                <Card.Title>{props.title}</Card.Title>\n                <Badge pill variant={props.color}>{props.category}</Badge>\n            </Card.Header>\n            <Card.Body>\n                <Card.Text>{props.description}</Card.Text>\n            </Card.Body>\n            <Card.Footer className=\"text-muted\">{footIcons}</Card.Footer>\n        </Card>\n    )\n}\n\nexport default Task;\n","import {connect} from 'react-redux';\nimport Task from '../components/Task';\nimport {fetchCall, fetchLoading} from '../redux/actions/loadboard';\nimport {editClick} from '../redux/actions/editTask';\nimport {openAside, changeAside} from '../redux/actions/aside';\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchCall: (url) => dispatch(fetchCall(url)),\n        fetchLoading: (bool) => dispatch(fetchLoading(bool)),\n        editClick: (taskId) => dispatch(editClick(taskId)),\n        openAside: ()=> dispatch(openAside(true)),\n        changeAside: (container) => dispatch(changeAside(container))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","import {EDIT_CLICK} from '../actionTypes'\n\nexport const editClick = (taskId) => {\n    return {\n        type: EDIT_CLICK,\n        editTask: taskId\n    }\n}","import React from 'react';\nimport {Row, Col} from 'bootstrap-4-react';\nimport Task from '../containers/Task';\n\nconst Board = (props) => {\n    let backlog = [];\n    let active = [];\n    let done = [];\n\n    // eslint-disable-next-line\n    props.tasks.map((card, i) => {\n        switch(true) {\n            case card.status === 'isBacklog' : backlog.push(<Task \n                    taskId={card._id}\n                    title={card.title}\n                    category={card.category}\n                    description={card.description}\n                    key={i}\n                    bgcolor={\"light\"}\n                    textColor={\"dark\"}\n                    color={card.color}\n                    status={card.status}\n                    // loadTasks={props.loadTasks}\n                />)\n            break \n            case card.status === 'isActive' : active.push(<Task \n                    taskId={card._id}\n                    title={card.title}\n                    category={card.category}\n                    description={card.description}\n                    key={i}\n                    bgcolor={\"light\"}\n                    textColor={\"dark\"}\n                    color={card.color}\n                    status={card.status}\n                    // loadTasks={props.loadTasks}\n                />)\n            break\n            case card.status === 'isDone' : done.push(<Task \n                    taskId={card._id}\n                    title={card.title}\n                    category={card.category}\n                    description={card.description}\n                    key={i}\n                    bgcolor={\"light\"}\n                    textColor={\"dark\"}\n                    color={card.color}\n                    status={card.status}\n                    // loadTasks={props.loadTasks}\n                />)\n            break\n            default:\n    }});\n\n    return (\n            <Row>\n                <Col>\n                    <h3>Backlog</h3>\n                    <div className=\"column backlog\">{backlog}</div>\n                </Col>\n                <Col>\n                    <h3>Active</h3>\n                    <div className=\"column active\">{active}</div>\n                </Col>\n                <Col>\n                    <h3>Done</h3>\n                    <div className=\"column done\">{done}</div>\n                </Col>\n            </Row>\n        // <section className=\"board\">\n        //     <article className=\"column backlog\">\n        //         <h3>Backlog</h3>\n        //         <div>{backlog}</div>\n        //     </article>\n        //     <article className=\"column active\">\n        //         <h3>Active</h3>\n        //         <div>{active}</div>\n        //     </article>\n        //     <article className=\"column done\">\n        //         <h3>Done</h3>\n        //         <div>{done}</div>\n        //     </article>\n        // </section>\n    )\n}\n\nexport default Board","import Board from '../components/Board';\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks\n    }\n}\n\nexport default connect(mapStateToProps)(Board);","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport {Formik} from 'formik';\nimport * as Yup from 'yup';\nimport Alert from 'react-bootstrap/Alert'\n\nconst schema = Yup.object({\n    taskTitle: Yup.string()\n        .min(4, 'Task title is too short')\n        .max(20, 'Task title is too long')\n        .required('Required'),\n    taskCategory: Yup.string()\n        .min(3, 'Task category is too short')\n        .max(20, 'Task category is too long')\n        .required('Required'),\n    taskDescription: Yup.string()\n        .required('Required'),\n    taskType: Yup.string()\n        .oneOf(['Bug', 'Feature', 'Tech Debt', 'Improvement', 'Research'], 'Required')\n        .required('Select a task type')\n});\n\nlet colorType = {\n    Bug: \"danger\",\n    Feature: \"success\",\n    TechDebt: \"warning\",\n    Improvement: \"primary\",\n    Research: \"info\"\n}\n\nconst NewTask = (props) => {\n    return (\n    <div>\n        <h3 style={{textAlign:'center'}}>Create Task</h3>\n        <Formik\n            validationSchema={schema}\n            onSubmit={async (values, actions) => {\n                let bodySubmit = {\n                    title: values.taskTitle,\n                    description: values.taskDescription,\n                    category: values.taskCategory,\n                    status: \"isBacklog\",\n                    type: values.taskType,\n                    color: colorType[values.taskType],\n                    assignee: null,\n                    priority: 3,\n                };\n                fetch(`/tasks`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(bodySubmit)\n                })\n                .then(res => res.json())\n                .then(data => {\n                    let message = `'${data.title}' task added to board`;\n                    actions.resetForm();\n                    actions.setStatus({alert: <Alert variant=\"success\">{message}</Alert>});\n                    props.fetchLoading(true);\n                    props.fetchCall('/tasks');\n                    props.fetchLoading(false);\n                })\n                    .catch(err => {\n                        let message = `'${values.taskTitle}' task was not added. ${err}`;\n                        actions.resetForm();\n                        actions.setStatus({alert: <Alert variant=\"danger\">{message}</Alert>});\n                    })\n                \n            }}\n            initialValues={{\n                taskTitle: '',\n                taskCategory: '',\n                taskDescription: '',\n                taskType: '- Select One -',\n                taskColor: '',\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                isSubmitting,\n                values,\n                touched,\n                errors,\n                status,\n                isValid\n            }) => (\n                <div>\n                {status ? status.alert : ''}\n                <Form className=\"new_task\" noValidate onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"taskTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control \n                            required\n                            type=\"text\" \n                            placeholder=\"Keep it short!\"\n                            name=\"taskTitle\"\n                            value={values.taskTitle} \n                            onChange={handleChange}\n                            isValid={touched.taskTitle && !errors.taskTitle}\n                        />\n                        {errors.taskTitle && touched.taskTitle ? (\n                            <div className=\"error\">{errors.taskTitle}</div>\n                        ) : null}\n                    </Form.Group>\n                    <Form.Group controlId=\"taskCategory\">\n                        <Form.Label>Category</Form.Label>\n                        <Form.Control \n                            required\n                            type=\"text\" \n                            placeholder=\"Which project/component?\" \n                            name=\"taskCategory\"\n                            value={values.taskCategory}\n                            onChange={handleChange}\n                            isValid={touched.taskCategory && !errors.taskCategory}\n                        />\n                        {errors.taskCategory && touched.taskCategory ? (\n                            <div className=\"error\">{errors.taskCategory}</div>\n                        ) : null}\n                    </Form.Group>\n                    <Form.Group controlId=\"taskDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control \n                            required\n                            as=\"textarea\" \n                            rows=\"3\" \n                            name=\"taskDescription\"\n                            placeholder=\"Describe task in one sentence.\"\n                            value={values.taskDescription}\n                            onChange={handleChange}\n                            isValid={touched.taskDescription && !errors.taskDescription}\n                        />\n                        {errors.taskDescription && touched.taskDescription ? (\n                            <div className=\"error\">{errors.taskDescription}</div>\n                        ) : null}\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control \n                            required\n                            as=\"select\"\n                            name=\"taskType\"\n                            value={values.taskType}\n                            onChange={handleChange}\n                            isValid={touched.taskType && !errors.taskType}\n                        >\n                            <option value=\"- Select One -\" disabled>- Select One -</option>\n                            <option id=\"danger\" value=\"Bug\">Bug</option>\n                            <option id=\"success\" value=\"Feature\">Feature</option>\n                            <option id=\"warning\" value=\"TechDebt\">Tech Debt</option>\n                            <option id=\"primary\" value=\"Improvement\">Improvement</option>\n                            <option id=\"info\" value=\"Research\">Research</option>\n                        </Form.Control>\n                        {errors.taskType && touched.taskType ? (\n                            <div className=\"error\">{errors.taskType}</div>\n                        ) : null}\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                        Submit\n                    </Button>\n                </Form>\n                </div>\n            )}\n        </Formik> \n    </div>\n);\n}\n\nexport default NewTask\n","import {connect} from 'react-redux';\nimport NewTask from '../components/NewTask';\nimport {fetchCall, fetchLoading} from '../redux/actions/loadboard';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchCall: (url) => dispatch(fetchCall(url)),\n        fetchLoading: (bool) => dispatch(fetchLoading(bool))\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(NewTask)","import React, {Component} from 'react';\nimport './App.css';\nimport 'material-icons'\nimport Board from './containers/Board';\nimport NewTask from './containers/NewTask';\nimport EditTask from './containers/EditTask'\n\nclass App extends Component {\ncomponentDidMount() {\n    this.props.fetchCall('/tasks');\n    this.props.fetchLoading(false);\n  }\n\n  render() {\n    let boardContainer = [];\n    if(this.props.isLoading) {\n      boardContainer = <p>I'm Loading Here!</p>\n    } else if(this.props.hasErrored) {\n      boardContainer = <h4 className=\"board_error\">There was an issue loading your board. Please reach out to the admin of this page.</h4>\n    } else {\n      boardContainer = <Board tasks={this.props.tasks} />\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Kanban App</h1>\n          <nav>\n            <span className=\"material-icons\" onClick={()=>{this.props.changeAside(<NewTask />); this.props.openAside(true);}} title=\"New Task\">playlist_add</span>\n          </nav>\n        </header>\n        <main>\n          {boardContainer}\n        </main>\n        {!this.props.asideActive\n          ? <aside className=\"aside\">\n              <span className=\"menuclose\" onClick={()=>{this.props.closeAside(false)}}>&times;</span>   \n              {this.props.asideContainer}\n            </aside>\n          : <aside className=\"aside active\">\n              <span className=\"menuclose\" onClick={()=>{this.props.closeAside(false)}}>&times;</span>  \n              {this.props.asideContainer}\n            </aside>\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import App from '../App';\nimport { connect } from 'react-redux';\nimport {fetchCall, fetchLoading} from '../redux/actions/loadboard';\nimport {closeAside, openAside, changeAside} from '../redux/actions/aside';\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks,\n        hasErrored: state.hasErrored,\n        isLoading: state.isLoading,\n        asideActive: state.asideActive,\n        asideContainer: state.asideContainer,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchCall: (url) => dispatch(fetchCall(url)),\n        fetchLoading: (bool) => dispatch(fetchLoading(bool)),\n        closeAside: ()=> dispatch(closeAside(false)),\n        openAside: ()=> dispatch(openAside(true)),\n        changeAside: (container) => dispatch(changeAside(container))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {combineReducers} from 'redux';\nimport {tasks, hasErrored, isLoading} from './loadboard';\nimport {asideActive, asideContainer} from './aside';\nimport {editTask} from './editTask';\nimport {user, userErrored, userIsLoading} from './auth';\n\n\nexport default combineReducers({tasks, hasErrored, isLoading, asideActive, asideContainer, editTask, user, userErrored, userIsLoading})","import {FETCH_ERROR, FETCH_LOADING, FETCH_SUCCESS} from '../actionTypes'\n\nexport const tasks = (state = [], action) => {\n    switch (action.type) {\n        case FETCH_SUCCESS: \n            return action.tasks\n        default: return state\n    }\n}\n\nexport const hasErrored = (state = false, action) => {\n    switch(action.type) {\n        case FETCH_ERROR: return action.hasErrored;\n        default: return state;\n    }\n}\n\nexport const isLoading = (state = true, action) => {\n    switch(action.type) {\n        case FETCH_LOADING: return action.isLoading;\n        default: return state;\n    }\n}","import {OPEN_ASIDE, CLOSE_ASIDE, ASIDE_CONTENT} from '../actionTypes';\n\nexport const asideActive = (state = false, action) => {\n    switch(action.type) {\n        case OPEN_ASIDE: return action.asideActive;\n        case CLOSE_ASIDE: return action.asideActive;\n        default: return state;\n    }\n}\n\nexport const asideContainer = (state = [], action) => {\n    switch(action.type) {\n        case ASIDE_CONTENT: return action.asideContainer;\n        default: return state;\n    }\n}","import {EDIT_CLICK} from '../actionTypes'\n\nexport const editTask = (state = [], action) => {\n    switch(action.type) {\n        case EDIT_CLICK: return action.editTask;\n        default: return state;\n    };\n}","import {USER_ERROR, USER_LOADING, USER_SUCCESS} from '../actionTypes'\nimport Cookie from 'js-cookie';\n\nexport const user = (state = [], action) => {\n    switch (action.type) {\n        case USER_SUCCESS: {\n            Cookie.set('kanban_crud_cookie', action.token)\n            return state;\n        }\n        default: return state\n    }\n}\n\nexport const userErrored = (state = false, action) => {\n    switch(action.type) {\n        case USER_ERROR: {console.log(action.message); return action.hasErrored};\n        default: return state;\n    }\n}\n\nexport const userIsLoading = (state = true, action) => {\n    switch(action.type) {\n        case USER_LOADING: return action.isLoading;\n        default: return state;\n    }\n}","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducers/index\";\nimport state from \"./state\";\n\nexport default createStore(reducer, state, applyMiddleware(thunk));\n","export default {\n    tasks: [],\n    isLoading: true,\n    hasErrored: false,\n    asideActive: false,\n    asideContainer: [],\n    editTask: [],\n    user: [],\n    userErrored: false,\n    userIsLoading: false, \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport {Form, Button} from 'react-bootstrap'\nimport Cookie from 'js-cookie';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.value;\n        let name = target.name;\n        this.setState({\n            [name]: value\n        });\n    }\n    onSubmit(e) {\n        // let credentials = {\n        //     username: this.username,\n        //     password: this.password\n        // }\n        // this.props.userLoading(true);\n        // this.props.userLogin(credentials);\n        // this.props.userLogin(false);\n        Cookie.set('kanban_crud_cookie', 'asdfasdfsabwefeasdfcd');\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <Form className=\"login\">\n                <Form.Group controlId=\"loginUsername\">\n                    <Form.Control name=\"username\" type=\"text\" placeholder=\"Enter username\" onChange={this.handleChange}/>\n                </Form.Group>\n                <Form.Group controlId=\"loginPassword\">\n                    <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" onChange={this.handleChange}/>\n                </Form.Group>\n                <Button variant=\"secondary\" onClick={this.onSubmit}>Login</Button>\n            </Form>\n        )\n    }\n}\n\nexport default Login;","import {USER_ERROR, USER_LOADING, USER_SUCCESS} from '../actionTypes'\n\nexport const userError = (bool, err) => {\n    return {\n        type:USER_ERROR,\n        hasErrored: bool,\n        message: err\n    }\n}\n\nexport const userLoading = (bool) => {\n    return {\n        type: USER_LOADING,\n        isLoading: bool\n    }\n}\n\nexport const userSuccess = (token) => {\n    return {\n        type:USER_SUCCESS,\n        token\n    }\n}\n\nexport const userSignup = (obj) => {\n    console.log('user is signing up');\n    return (dispatch) => {\n        fetch('/users', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify(obj)\n        })\n        .then(res=>res.text())\n        .then(token=>{\n                dispatch(userSuccess(token));\n            })\n            .catch(err=>dispatch(userError(true, err)))\n    }\n}\n\nexport const userLogin = (obj) => {\n    return (dispatch) => {\n        console.log('user is logging in');\n        fetch('/users', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify(obj)\n        })\n        .then(res=>res.text())\n        .then(token=>{\n                dispatch(userSuccess(token));\n            })\n            .catch(err=>dispatch(userError(true, err)))\n    }\n}\n\n// dispatch(userError(true, err))","import React, {Component} from 'react';\nimport {Form, Button} from 'react-bootstrap'\n\nclass Signup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            username: '',\n            password: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        let target = e.target;\n        let value = target.value;\n        let name = target.name;\n        this.setState({\n            [name]: value\n        });\n    }\n    onSubmit(e) {\n        let credentials = {\n            name: this.name,\n            username: this.username,\n            password: this.password\n        }\n        this.props.userSignup(credentials);\n    }\n\n    render() {\n    return (\n            <Form className=\"signup\">\n                <Form.Group controlId=\"signupEmail\">\n                    <Form.Control name=\"name\" type=\"name\" placeholder=\"Name\" onChange={this.handleChange}/>\n                </Form.Group>\n                <Form.Group controlId=\"signupUsername\">\n                    <Form.Control name=\"username\" type=\"text\" placeholder=\"Username\" onChange={this.handleChange}/>\n                </Form.Group>\n                <Form.Group controlId=\"signupPassword\">\n                    <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" onChange={this.handleChange}/>\n                </Form.Group>\n                <Button variant=\"primary\" style={{textAlign: 'right'}} onClick={this.onSubmit}>Sign Up</Button>\n            </Form>\n        )\n    }\n}\n\nexport default Signup;","import Login from '../components/Auth/Login';\nimport {connect} from 'react-redux';\nimport {userLogin, userLoading, userError} from '../redux/actions/auth';\n\nconst mapStateToProps = (state) => {\n    return {\n        userLoading: state.userLoading, \n        userErrored: state.userErrored,\n        user: []\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        userLogin: (obj) => dispatch(userLogin(obj)),\n        userLoading: (bool) => dispatch(userLoading(bool)),\n        userError: (bool) => dispatch(userError(bool)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import Signup from '../components/Auth/Signup';\nimport {connect} from 'react-redux';\nimport {userSignup, userLoading, userError} from '../redux/actions/auth';\n\nconst mapStateToProps = (state) => {\n    return {\n        userLoading: state.userLoading, \n        userErrored: state.userErrored,\n        user: []\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        userSignup: (obj) => dispatch(userSignup(obj)),\n        userLoading: (bool) => dispatch(userLoading(bool)),\n        userError: (bool) => dispatch(userError(bool)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Cookie from \"js-cookie\";\nimport Home from \"./components/Auth/Home\";\n\n// const oldFetch = window.fetch;\n// window.fetch = (url, settings = {}) => {\n//   return oldFetch(url,\n//     {...settings,\n//       headers: {...settings.headers, authorization: localStorage.getItem(\"token\")}\n//     }\n//     );\n// };\n\n// const cookie = Cookie.get('kanban_crud_cookie')\n// let appPage = []\n// if(cookie === undefined) {\n//     appPage = <Provider store={store}><Home /></Provider>\n// } else {\n//     appPage = <Provider store={store}><App /></Provider>\n// }\n\n//<Provider store={store}><App /></Provider>\n//<Home />\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}